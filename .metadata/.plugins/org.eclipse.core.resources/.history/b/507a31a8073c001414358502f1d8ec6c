package com.passportparking.mobile.services;

import java.util.List;

import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Criteria;
import android.location.GpsStatus;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.IBinder;
import android.os.SystemClock;

import com.passportparking.mobile.utils.PLog;
import com.passportparking.mobile.utils.PNavigationHelper;

public class PNavigationService extends Service implements SensorEventListener {

	private boolean isActivityRunning = false;

	public static final String TAG = "PNavigationService";
	private LocationListener gpsLocListener = new MyGPSLocationListener();
	private GpsStatus.Listener gpsStatusListener = new MyGpsStatusListener();
	private LocationManager mlocManager;
	private Location mylocation;
	private SensorManager mSensorManager;
	private Sensor accelerometer, magnetometer;
	private long lastLocationChangeMilli;
	private double lastSensorChangeAngle,lastSensorChangeUpdateAngle;
	private boolean isGPSFix = false;

	@Override
	public void onCreate() {
		super.onCreate();
		registerReceiver();
		mlocManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		mSensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);

		accelerometer = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		magnetometer = mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		unregisterReceiver(navServiceReceiver);
		if (mlocManager != null) {
			mlocManager.removeUpdates(gpsLocListener);
			mlocManager.removeGpsStatusListener(gpsStatusListener);
			mlocManager = null;
		}

		if (mSensorManager != null) {
			mSensorManager = null;
		}
		PLog.i(TAG, "PNavigationService Destroyed");
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		return START_STICKY;
	}

	@Override
	public IBinder onBind(Intent arg0) {
		return null;
	}

	private void registerReceiver() {
		IntentFilter filter = new IntentFilter();
		filter.addAction(PNavigationHelper.ACTION_NAV_SERVICE);
		registerReceiver(navServiceReceiver, filter);
		PLog.i(TAG, "navService receiver registered.");
		sendInitialAction();
	}

	private BroadcastReceiver navServiceReceiver = new BroadcastReceiver() {

		@Override
		public void onReceive(Context paramContext, Intent paramIntent) {
//			PLog.i(TAG, "Inside OnReceive()");
			String action = paramIntent.getAction();
			if (action.equals(PNavigationHelper.ACTION_NAV_SERVICE)) {
				doAction(paramIntent);
			}
		}
	};

	private void checkGPS() {
		if (isGpsAvailable()) {
			PLog.i(TAG, "GPS available");
			Intent i = new Intent();
			i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.GPS_ON);
			sendBroadCast(i);
		} else {
			PLog.i(TAG, "GPS not available");
			if (mlocManager != null) {
				mlocManager.removeUpdates(gpsLocListener);
			}
			Intent i = new Intent();
			i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.GPS_OFF);
			sendBroadCast(i);
		}
	}

	private void startGPS() {
		if (isGpsAvailable()) {
			mlocManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 100, 0, gpsLocListener);
			mlocManager.addGpsStatusListener(gpsStatusListener);
			Criteria criteria = new Criteria();
			String bestProvider = mlocManager.getBestProvider(criteria, false);
			Location location = mlocManager.getLastKnownLocation(bestProvider);
			callLocationChanged(location);
		}
	}
	
//	private void pauseGPS() {
//		if(mlocManager != null) {
//			mlocManager.removeUpdates(gpsLocListener);
//			mlocManager.removeGpsStatusListener(gpsStatusListener);
//		}
//	}
//	
//	private void resumeGPS() {
//		if(mlocManager != null) {
//			startGPS();
//		}
//	}

	private boolean isGpsAvailable() {
		boolean GPSStatus = false;
		GPSStatus = mlocManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
		List<String> providerList = mlocManager.getAllProviders();
		if (providerList.contains(LocationManager.GPS_PROVIDER)) {
			GPSStatus = mlocManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
		}
		return GPSStatus;
	}

	private void sendBroadCast(Intent data) {
//		PLog.i(TAG, "Inside Nav sendBroadCast()");
		data.setAction(PNavigationHelper.ACTION_HELPER_SERVICE);
		if (isActivityRunning)
			sendBroadcast(data);
	}

	private void sendInitialAction() {
		Intent i = new Intent();
		i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.SERVICE_RUNNING);
		i.setAction(PNavigationHelper.ACTION_HELPER_SERVICE);
		sendBroadcast(i);
	}

	private void doAction(Intent data) {
		int action = data.getExtras().getInt(PNavigationHelper.NAV_ACTION);
		switch (action) {
		case PNavigationHelper.ACTIVITY_RUNNING:
			PLog.i(TAG, "Action activity running");
			isActivityRunning = true;
			break;
		case PNavigationHelper.ACTIVITY_STOPPED:
			PLog.i(TAG, "Action activity stopped");
			isActivityRunning = false;
			break;
		case PNavigationHelper.ACTION_CHECKGPS:
			PLog.i(TAG, "Action check gps");
			checkGPS();
			break;
		case PNavigationHelper.ACTION_STARTGPS:
			PLog.i(TAG, "Action start gps");
			startGPS();
			break;
		case PNavigationHelper.ACTIVITY_RESUMED:
			PLog.i(TAG, "Action activity resumed");
			registerSensors();
//			resumeGPS();
			break;
		case PNavigationHelper.ACTIVITY_PAUSED:
			PLog.i(TAG, "Action activity paused");
			unregisterSensors();
//			pauseGPS();
			break;
		}
	}

	private void callLocationChanged(Location loc) {
		Intent i = new Intent();
		i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.ACTION_LOCATION_CHANGED);
		i.putExtra(PNavigationHelper.CHANGED_LOCATION, loc);
		sendBroadCast(i);
	}

	private void callGpsProviderStatusChanged(int status) {
		Intent i = new Intent();
		i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.ACTION_GPS_PROVIDER_STATUS_CHANGED);
		i.putExtra(PNavigationHelper.CHANGED_GPS_PROVIDER_STATUS, status);
		sendBroadCast(i);
	}
	
	private void callGpsStatusChanged(int status) {
		Intent i = new Intent();
		i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.ACTION_GPS_STATUS_CHANGED);
		i.putExtra(PNavigationHelper.CHANGED_GPS_STATUS, status);
		sendBroadCast(i);
	}
	
	private void callSensorChanged(float values) {
		double change = lastSensorChangeAngle - lastSensorChangeUpdateAngle;
		double sign = Math.signum(change);
		change = sign == +1.0 ? change : change * -1.0; 
		//PLog.i(TAG, "angle change:"+change);
		if(change < PNavigationHelper.SENSONR_CHANGE_THRESHOLD_ANGLE) {
			return;
		}
		
//		PLog.i(TAG, "Inside callSensorChanged()");
		Intent i = new Intent();
		i.putExtra(PNavigationHelper.NAV_ACTION, PNavigationHelper.ACTION_SENSOR_CHANGED);
		i.putExtra(PNavigationHelper.CHANGED_SENSOR, values);
		sendBroadCast(i);
		lastSensorChangeUpdateAngle = Math.toDegrees(values);
	}

	public class MyGPSLocationListener implements LocationListener {

		@Override
		public void onLocationChanged(Location loc) {
//			PLog.i(TAG, "**GPS onLocationChanged()**");
			if (loc == null) {
				PLog.i(TAG, "Location is null.");
				return;
			}
			
			lastLocationChangeMilli = SystemClock.elapsedRealtime();
			mylocation = loc;
			callLocationChanged(loc);
		}

		@Override
		public void onProviderDisabled(String provider) {
			PLog.i(TAG, "***GPS provider disabled");
			checkGPS();
		}

		@Override
		public void onProviderEnabled(String provider) {
			PLog.i(TAG, "***GPS provider enabled. " + provider);
			checkGPS();
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) {
//			PLog.i(TAG, "***GPS status changed. " + status);
			callGpsProviderStatusChanged(status);
		}
	}

	private void registerSensors() {
		PLog.i(TAG, "Inside registerSensors");
		mSensorManager.registerListener(this, accelerometer, SensorManager.SENSOR_DELAY_UI);
		mSensorManager.registerListener(this, magnetometer, SensorManager.SENSOR_DELAY_UI);
	}

	private void unregisterSensors() {
		PLog.i(TAG, "Inside unregisterSensors");
		mSensorManager.unregisterListener(this, accelerometer);
		mSensorManager.unregisterListener(this, magnetometer);

	}

	float[] mGravity;
	float[] mGeomagnetic;

	@Override
	public void onSensorChanged(SensorEvent event) {
		if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER)
			mGravity = event.values;
		if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)
			mGeomagnetic = event.values;

		if (mGravity != null && mGeomagnetic != null) {
			float R[] = new float[9];
			float I[] = new float[9];
			boolean success = SensorManager.getRotationMatrix(R, I, mGravity, mGeomagnetic);
			if (success) {
				float orientation[] = new float[3];
				SensorManager.getOrientation(R, orientation);
				lastSensorChangeAngle = Math.toDegrees(orientation[0]);
				callSensorChanged(orientation[0]);
			}
		}
	}

	@Override
	public void onAccuracyChanged(Sensor paramSensor, int paramInt) {	}
	
	private class MyGpsStatusListener implements GpsStatus.Listener {

		@Override
		public void onGpsStatusChanged(int event) {
			switch (event) {
			case GpsStatus.GPS_EVENT_FIRST_FIX:
				callGpsStatusChanged(event);
				isGPSFix = true;
				break;
			case GpsStatus.GPS_EVENT_SATELLITE_STATUS:
				if(mylocation != null) {
					isGPSFix = (SystemClock.elapsedRealtime() - lastLocationChangeMilli) < PNavigationHelper.GPS_STATUS_THRESHOLD_TIME;
				}
				
				if(!isGPSFix) {
					callGpsStatusChanged(GpsStatus.GPS_EVENT_STARTED);
				}
				
				break;
			case GpsStatus.GPS_EVENT_STARTED:
				PLog.i(TAG,"Gps event started.");
				callGpsStatusChanged(event);
				break;
			case GpsStatus.GPS_EVENT_STOPPED:
				PLog.i(TAG,"Gps event stopped.");
				callGpsStatusChanged(event);
				break;
			}
		}
		
	}
}
